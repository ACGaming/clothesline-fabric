import net.fabricmc.loom.task.RemapJar

plugins {
    id "fabric-loom" version "0.2.2-SNAPSHOT"
    id "com.github.johnrengelman.shadow" version "4.0.3"
    id "jacoco"
    id "com.matthewprenger.cursegradle" version "1.1.2"
    id "maven-publish"
    id "signing"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "com.jamieswhiteshirt"
archivesBaseName = "clothesline-fabric"
version = "0.0.15"

repositories {
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release/"
    }
}

minecraft {
}

configurations {
    contained {
        transitive = false
    }
}

shadowJar {
    configurations = [project.configurations.contained]
}

dependencies {
    minecraft "com.mojang:minecraft:1.14 Pre-Release 5"
    mappings "net.fabricmc:yarn:1.14 Pre-Release 5+build.2"
    modCompile "net.fabricmc:fabric-loader:0.4.1+build.126"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modCompile "net.fabricmc:fabric:0.2.7+build.123"
    modCompile "com.jamieswhiteshirt:developer-mode:1.0.11"

    compile "com.jamieswhiteshirt:rtree-3i-lite:0.1-SNAPSHOT"
    contained "com.jamieswhiteshirt:rtree-3i-lite:0.1-SNAPSHOT"
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.2.+"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.2.+"
    testCompile "org.mockito:mockito-core:2.+"
}

test {
    useJUnitPlatform()
}

processResources {
    exclude "**/*.psd"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task remapShadowJar(type: RemapJar, dependsOn: tasks.shadowJar) {
    jar = shadowJar.archivePath
}

tasks.assemble.dependsOn tasks.remapJar
tasks.assemble.dependsOn tasks.remapShadowJar

project.ext.isReleaseVersion = !version.endsWith("-SNAPSHOT")

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(jar) {
                builtBy remapJar
            }
            artifact(shadowJar) {
                builtBy remapShadowJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            afterEvaluate {
                pom.withXml {
                    NodeList dependencies = asNode().dependencies

                    // Remove developer-mode dependency (should be modRuntimeOnly)
                    dependencies.'*'.findAll() {
                        it.artifactId.text() == 'developer-mode'
                    }.forEach() {
                        it.parent().remove(it)
                    }

                    // Add rtree-3i-lite dependency
                    Node rtreeDependencyNode = dependencies.get(0).appendNode('dependency')
                    rtreeDependencyNode.appendNode('groupId', 'com.jamieswhiteshirt')
                    rtreeDependencyNode.appendNode('artifactId', 'rtree-3i-lite')
                    rtreeDependencyNode.appendNode('version', '0.1-SNAPSHOT')
                    rtreeDependencyNode.appendNode('scope', 'compile')
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://maven.jamieswhiteshirt.com/libs-release/'
            def snapshotsRepoUrl = 'https://maven.jamieswhiteshirt.com/libs-snapshot/'
            url = isReleaseVersion ? releasesRepoUrl : snapshotsRepoUrl

            credentials {
                username project.properties.mavenUser
                password project.properties.mavenPassword
            }
        }
    }
}

signing {
    required = isReleaseVersion
    sign publishing.publications.mavenJava
}

curseforge {
    if (project.hasProperty("curseForgeApiKey")) {
        apiKey = project.properties.curseForgeApiKey
    }
    project {
        id = "310078"
        changelogType = "markdown"
        changelog = file("CHANGELOG.md")
        releaseType = "beta"
        addGameVersion "1.14-Snapshot"
        mainArtifact(remapShadowJar.jar) {
            displayName = "Clothesline $project.version"
            relations {
                requiredDependency "fabric"
            }
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

afterEvaluate {
    // CurseGradle generates tasks in afterEvaluate for each project
    // There isn't really any other way to make it depend on a task unless it is an AbstractArchiveTask
    tasks.curseforge310078.dependsOn remapShadowJar
}
