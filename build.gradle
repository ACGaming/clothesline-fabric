plugins {
    id "fabric-loom" version "0.2.4-SNAPSHOT"
    id "jacoco"
    id "com.matthewprenger.cursegradle" version "1.1.2"
    id "maven-publish"
    id "signing"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = "com.jamieswhiteshirt"
archivesBaseName = "clothesline-fabric"
version = "0.1.0"

repositories {
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release/"
    }
}

minecraft {
}

dependencies {
    minecraft "com.mojang:minecraft:1.14.3"
    mappings "net.fabricmc:yarn:1.14.3+build.12"
    modCompile "net.fabricmc:fabric-loader:0.4.8+build.155"

    include "com.jamieswhiteshirt:rtree-3i-lite-fabric:0.3.0"

    modImplementation "net.fabricmc.fabric-api:fabric-api:0.3.0+build.188"
    modApi "com.jamieswhiteshirt:rtree-3i-lite-fabric:0.3.0"
    modRuntime "com.jamieswhiteshirt:developer-mode:1.0.12"
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.2.+"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.2.+"
    testCompile "org.mockito:mockito-core:2.+"
}

test {
    useJUnitPlatform()
}

processResources {
    exclude "**/*.psd"
}

afterEvaluate {
    remapJar {
        addNestedDependencies = false
    }
}

task bundleJar(type: Jar) {
    from sourceSets.main.output
    classifier = "all"
}

task remapBundleJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: bundleJar) {
    output = bundleJar.archivePath
    bundleJar.classifier = "all-dev"
    input = bundleJar.archivePath
    addNestedDependencies = true
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives(sourcesJar) {
        builtBy remapSourcesJar
    }
    archives(remapBundleJar.output) {
        builtBy remapBundleJar
    }
    afterEvaluate {
        archives(remapJar.output) {
            builtBy remapJar
        }
    }
}

project.ext.isReleaseVersion = !version.endsWith("-SNAPSHOT")

publishing {
    publications {
        mavenJava(MavenPublication) {
            afterEvaluate {
                artifact(remapJar.output) {
                    builtBy remapJar
                }
                artifact(remapSourcesJar.output) {
                    builtBy remapSourcesJar
                }

                pom.withXml {
                    NodeList dependencies = asNode().dependencies

                    // Remove developer-mode dependency (should be modRuntimeOnly)
                    dependencies.'*'.findAll() {
                        it.artifactId.text() == 'developer-mode'
                    }.forEach() {
                        it.parent().remove(it)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://maven.jamieswhiteshirt.com/libs-release/'
            def snapshotsRepoUrl = 'https://maven.jamieswhiteshirt.com/libs-snapshot/'
            url = isReleaseVersion ? releasesRepoUrl : snapshotsRepoUrl

            credentials {
                username project.properties.mavenUser
                password project.properties.mavenPassword
            }
        }
    }
}

signing {
    required = isReleaseVersion
    sign publishing.publications.mavenJava
}

curseforge {
    if (project.hasProperty("curseForgeApiKey")) {
        apiKey = project.properties.curseForgeApiKey
    }
    project {
        id = "310078"
        changelogType = "markdown"
        changelog = file("CHANGELOG.md")
        releaseType = "beta"
        addGameVersion "1.14.3"
        relations {
            requiredDependency "fabric-api"
        }
        mainArtifact(remapBundleJar.output) {
            displayName = "Clothesline $project.version"
        }
        afterEvaluate {
            uploadTask.dependsOn(remapBundleJar)
        }
    }
    options {
        forgeGradleIntegration = false
    }
}
